- name: "Set quay release"
  set_fact:
    quay_release: "0.0.1"

- name: "Deploy olm operator"
  block:
    - name: "Check for the existence of earlier releases of the operator on the quay.io app repository"
      shell: >
        "curl -s -H \"Authorization: basic {{ quay_token }}\" https://quay.io/cnr/api/v1/packages/{{
          quay_namespace }}/{{ package_name }}-test | {{ jq_bin_path }} '.[].release' | sort --version-sort | tail -n 1"
      register: quay_release_result
      no_log: true

    - name: "Increment testing quay app release if exists"
      shell: >
        "echo {{ quay_release_result.stdout }} | awk -F. -v OFS=. 'NF==1{print ++$NF};
        NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf(\"%0*d\", length($NF),
        ($NF+1)%(10^length($NF))); print}'"
      register: quay_increment_release_result
      when:
        - quay_release_result is defined
        - quay_release_result.stdout is defined
        - quay_release_result.stdout|length > 0
        - quay_release_result.stdout != "null"

    - name: "Set quay release to the incremented one if exists"
      set_fact:
        quay_release: "{{ quay_increment_release_result.stdout }}"
      when:
        - quay_increment_release_result is defined
        - quay_increment_release_result.stdout is defined
        - quay_increment_release_result.stdout|length > 0

    - name: "Append the -test suffix to the packageName"
      shell: "{{ yq_bin_path }} w -i {{ package_path }} 'packageName' '{{ package_name }}-test'"

    - name: "Push the operator metadata to the private quay.io repository"
      shell: "operator-courier push {{ operator_work_dir }} {{ quay_namespace }} {{ package_name }}-test {{ quay_release }} \"basic {{ quay_token }}\""
      no_log: true

    - name: "Create {{ openshift_namespace }} project"
      shell: "{{ oc_bin_path }} new-project {{ openshift_namespace }}"
      register: openshift_namespace_result
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: "Inject openshift kube_objects"
      block:
        - name: "include_role"
          include_role:
            name: inject_openshift_kube_objects
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      when:
        - kube_objects is defined
        - kube_objects != "N/A"
        - kube_objects != "null"

    - name: "Create the olm operator files directory"
      shell: "mkdir -p {{ olm_operator_files_path }}"

    - name: "Process the operatorgroup template"
      template:
        src: "operatorgroup.yml.j2"
        dest: "{{ olm_operator_files_path }}/operatorgroup.processed.yml"
        mode: 0644

    - name: "Process the marketplacesecret template"
      template:
        src: "marketplacesecret.yml.j2"
        dest: "{{ olm_operator_files_path }}/marketplacesecret.processed.yml"
        mode: 0644

    - name: "Process the subscription template"
      template:
        src: "subscription.yml.j2"
        dest: "{{ olm_operator_files_path }}/subscription.yml"
        mode: 0644

    - name: "Process the operatorsource template"
      template:
        src: "operatorsource.yml.j2"
        dest: "{{ olm_operator_files_path }}/operatorsource.yml"
        mode: 0644

    - name: "Create all processed resources in the deploy directory"
      shell: "for f in $(find {{ olm_operator_files_path }} -maxdepth 1 -name \"*processed.yml\"); do {{ oc_bin_path }} create -f $f; done"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: "Create the operatorsource"
      shell: "{{ oc_bin_path }} apply -f {{ olm_operator_files_path }}/operatorsource.yml"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: "Wait for the operatorsource pod to start up"
      shell: "{{ oc_bin_path }} get pods -n openshift-marketplace | grep test-operators- | grep Running"
      register: operator_source_result
      retries: 60
      delay: 10
      until: operator_source_result.rc == 0
      ignore_errors: true
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: "Check if scorecard secret exists"
      stat:
        path: "{{ operator_work_dir }}/../scorecard.secret.yaml"
      register: scorecard_secret_result

    - name: "Create the scorecard secret if it exists"
      shell: "{{ oc_bin_path }} create -f {{ operator_work_dir }}/../scorecard.secret.yaml"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      when: scorecard_secret_result.stat.exists

    - name: "Create the subscription 0!"
      shell: "{{ oc_bin_path }} create -f {{ olm_operator_files_path }}/subscription.yml"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: "Wait for the operator {{ operator_pod_name }} pod to start up"
      shell: "{{ oc_bin_path }} get pods | grep {{ operator_pod_name }} | grep Running"
      register: operator_result
      retries: 90
      delay: 10
      until: operator_result.rc == 0
      ignore_errors: true
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: "Get the details of the deployed CSVs"
      shell: "{{ oc_bin_path }} describe csvs"
      register: csv_describe_result
      ignore_errors: true
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: "Output the CSV description to a debug file"
      copy:
        content: "{{ csv_describe_result.stdout }}"
        dest: "{{ work_dir }}/olm-operator-csv-debug.txt"
        mode: 0644
      when: csv_describe_result.stdout|length > 0

    - name: "Get the pod status of the deployed operator"
      shell: >
        "{{ oc_bin_path }} get --output=name pods | grep {{ operator_pod_name }} | cut -f1
        | xargs -I{} {{ oc_bin_path }} get {} -o yaml | {{ yq_bin_path }} r - \"status\""
      register: operator_pod_result
      ignore_errors: true
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      when: csv_describe_result.stdout|length > 0

    - name: "Output the operator pod log to a debug file"
      copy:
        content: "{{ operator_pod_result.stdout }}"
        dest: "{{ work_dir }}/olm-operator-pod-debug.txt"
        mode: 0644
      when:
        - csv_describe_result.stdout|length > 0
        - operator_pod_result.stdout|length > 0

    - name: "Get the pod container logs of the deployed operator"
      shell: >
        "{{ oc_bin_path }} get --output=name pods | grep {{ operator_pod_name }}
        | cut -d' ' -f1 | xargs -I{} {{ oc_bin_path }} logs {} -c {{ operator_container_name }}"
      register: operator_container_result
      ignore_errors: true
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      when: csv_describe_result.stdout|length > 0

    - name: "Output the operator container log to a debug file"
      copy:
        content: "{{ operator_container_result.stdout }}"
        dest: "{{ work_dir }}/olm-operator-container-debug.txt"
        mode: 0644
      when:
        - csv_describe_result.stdout|length > 0
        - operator_container_result.stdout|length > 0

    - name: "Get the catalogsource pod log"
      shell: >
        "{{ oc_bin_path }} get --output=name pods -n openshift-marketplace
        | grep test-operators | cut -d' ' -f1 | xargs -I{} {{ oc_bin_path }}
        logs {} -n openshift-marketplace"
      register: catalog_source_result
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: "Output the catalogsource log to a debug file"
      copy:
        content: "{{ catalog_source_result.stdout }}"
        dest: "{{ work_dir }}/olm-catalog-source-debug.txt"
        mode: 0644
      when: catalog_source_result.stdout is defined

    - name: "Get the catalog-operator pod log"
      shell: >
        "{{ oc_bin_path }} get --output=name pods -n openshift-operator-lifecycle-manager
        | grep catalog-operator | cut -d' ' -f1 | xargs -I{} {{ oc_bin_path }} logs {}
        -n openshift-operator-lifecycle-manager | tail -n 100"
      register: catalog_operator_result
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: "Output the catalog-operator log to a debug file"
      copy:
        content: "{{ catalog_operator_result.stdout }}"
        dest: "{{ work_dir }}/olm-catalog-operator-debug.txt"
        mode: 0644
      when: catalog_operator_result.stdout is defined

    - name: "Get the InstallPlan debug output"
      shell: "{{ oc_bin_path }} describe installplan -n {{ openshift_namespace }}"
      register: installplan_result
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: "Output the InstallPlan debug output to a debug file"
      copy:
        content: "{{ installplan_result.stdout }}"
        dest: "{{ work_dir }}/olm-installplan-debug.txt"
        mode: 0644
      when: installplan_result.stdout is defined

    - name: "Set fact for deploy olm operator results"
      set_fact:
        deploy_olm_operator_results: {'result': 'pass', 'msg': ''}

    - name: "Get replicaset logs for operators that failed olm-deployment output"
      shell: >
        "{{ oc_bin_path }} get replicasets -o
        go-template={%raw%}'{{ range .items }}{{ .status.conditions }}{{ \"\\n\" }}{{ end }}'{%endraw%}
        -n {{ openshift_namespace }}"
      register: olm_replicaset_output
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      when: operator_result.rc != 0

    - name: "Output logs for operators that failed olm-deployment output to a debug file"
      copy:
        content: "{{ olm_replicaset_output.stdout }}"
        dest: "{{ work_dir }}/operator-olm-replicaset-output.txt"
        mode: 0644
      when: olm_replicaset_output.stdout is defined

    - name: "Failed operator deployment while waiting for operator pod deployment"
      fail:
        msg: 'Operator deployment with OLM failed, check the olm-*.txt files for more details'
      when: operator_result.rc != 0

    - name: "Wait for the operator CSV {{ current_csv }} to be in the `Succeeded` phase before finishing"
      shell: "{{ oc_bin_path }} -n {{ openshift_namespace }} get csv {{ current_csv }} -o jsonpath='{.status.phase}' || true"
      register: operator_csv_phase
      retries: 90
      delay: 10
      until: operator_csv_phase.stdout == "Succeeded"
      ignore_errors: true
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

  rescue:

    - name: "Rescue block contains the error messages"
      debug:
        msg: "Rescue block has found an error, The following are details of failed task."

    - name: "FAILED task name in ansible is as follows:"
      debug:
        msg: "{{ ansible_failed_task.name }}"

    - name: "Result of failed task"
      debug:
        msg: "{{ ansible_failed_result }}"

    - name: "Set failure result"
      set_fact:
        deploy_olm_operator_results: {'result': 'fail', 'name': "{{ ansible_failed_task.name }}", 'msg': "{{ ansible_failed_result }}"}

    - name: "Failed on deploy_olm_operator_results"
      fail:
        msg: "{{ deploy_olm_operator_results }}"

  always:
    - name: "Write deploy_olm_operator results to json file"
      copy:
        content: "{{ deploy_olm_operator_results | to_nice_json }}"
        dest: deploy_olm_operator_results.json
        mode: 0644
