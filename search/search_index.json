{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PR History Statistics Number of PR merged over time Download : png Average PR merging time Download : png","title":"PR History Statistics"},{"location":"#pr-history-statistics","text":"","title":"PR History Statistics"},{"location":"#number-of-pr-merged-over-time","text":"Download : png","title":"Number of PR merged over time"},{"location":"#average-pr-merging-time","text":"Download : png","title":"Average PR merging time"},{"location":"operatorTestPlaybooksCI/","text":"Purpose This document describes about the Upstream Operator Test Playbooks CI Pipeline and how it works. Introduction The Upstream Operator Test Playbooks CI Pipeline exists to automatically run tests against pull requests in the redhat-operator-ecosystem/operator-test-playbooks GitHub repository . Configuration A webhook is configured so that the repository sends events to the github2fedmsg web application. Any activity (ex: adding comments) in the repository is therefore sent to github2fedmsg, which then rebroadcasts on the Fedora Messaging bus (fedmsg). For more information on github2fedmsg and Fedora Messaging see github2fedmsg Usage The test-operator-test-playbooks jenkins job runs on the CVP CI Jenkins server. The job is triggered by a message on the Fedora Messaging bus: Indicates that a pull request was opened, re-opened, or synchronized (\u201csynchronized\u201d meaning that code changes were pushed to an already-opened pull request) Ex: PR-opened Indicates a comment was added that contains the text /retest or /test CVP Ex: PR-comment-added The openshift project name for test-operator-test-playbooks is cvp-ci-operatortestplaybooks The test-operator-test-playbooks job parses the fedmsg to determine what files have changed and what repository and branch needs to be tested. If the data can be successfully parsed, test-operator-test-playbooks uses CVP bot account on GitHub to create a check status, CVP/pr-sanity-test , for the pull request, this check can also be seen on the PR among other tests. Note: If the only file that has changed is README.md, test-operator-test-playbooks will then exit successfully. No further tests are required since no ansible playbooks have changed. The test-operator-test-playbooks jenkins job configures it\u2019s own Product/Team Jenkins server to run the testing pipelines. When this is complete the test-operator-test-playbooks job currently triggers three test pipelines on it\u2019s Team Jenkins server: cvp-redhat-operator-bundle-image-validation-test cvp-redhat-operator-metadata-validation-test cvp-isv-operator-metadata-validation-test These are the same pipelines that runs in production. The sample operators used for testing in these pipelines are the same used in CVP-CI setup tests. The pipelines are running in parallel, although they are started one minute apart from each other. When a testing pipeline is started, the test-operator-test-playbooks job adds a new check status to the pull request on GitHub indicating the name of the test pipeline and it sets the status to \u201cpending\u201d, so that end-users are informed that a test is in progress. When a testing pipeline completes, the check status is updated with either success or failure . Each pipeline\u2019s artifacts are uploaded to Amazon S3, the same artifacts as are uploaded in production, and can be viewed externally to determine which stages in the testing pipeline failed. The artifacts also contain a generalized link at the bottom of each test logs, so that the CVP team can access all the artifacts for the test pipeline that are not available externally.","title":"Purpose"},{"location":"operatorTestPlaybooksCI/#purpose","text":"This document describes about the Upstream Operator Test Playbooks CI Pipeline and how it works.","title":"Purpose"},{"location":"operatorTestPlaybooksCI/#introduction","text":"The Upstream Operator Test Playbooks CI Pipeline exists to automatically run tests against pull requests in the redhat-operator-ecosystem/operator-test-playbooks GitHub repository .","title":"Introduction"},{"location":"operatorTestPlaybooksCI/#configuration","text":"A webhook is configured so that the repository sends events to the github2fedmsg web application. Any activity (ex: adding comments) in the repository is therefore sent to github2fedmsg, which then rebroadcasts on the Fedora Messaging bus (fedmsg). For more information on github2fedmsg and Fedora Messaging see github2fedmsg","title":"Configuration"},{"location":"operatorTestPlaybooksCI/#usage","text":"The test-operator-test-playbooks jenkins job runs on the CVP CI Jenkins server. The job is triggered by a message on the Fedora Messaging bus: Indicates that a pull request was opened, re-opened, or synchronized (\u201csynchronized\u201d meaning that code changes were pushed to an already-opened pull request) Ex: PR-opened Indicates a comment was added that contains the text /retest or /test CVP Ex: PR-comment-added The openshift project name for test-operator-test-playbooks is cvp-ci-operatortestplaybooks The test-operator-test-playbooks job parses the fedmsg to determine what files have changed and what repository and branch needs to be tested. If the data can be successfully parsed, test-operator-test-playbooks uses CVP bot account on GitHub to create a check status, CVP/pr-sanity-test , for the pull request, this check can also be seen on the PR among other tests. Note: If the only file that has changed is README.md, test-operator-test-playbooks will then exit successfully. No further tests are required since no ansible playbooks have changed. The test-operator-test-playbooks jenkins job configures it\u2019s own Product/Team Jenkins server to run the testing pipelines. When this is complete the test-operator-test-playbooks job currently triggers three test pipelines on it\u2019s Team Jenkins server: cvp-redhat-operator-bundle-image-validation-test cvp-redhat-operator-metadata-validation-test cvp-isv-operator-metadata-validation-test These are the same pipelines that runs in production. The sample operators used for testing in these pipelines are the same used in CVP-CI setup tests. The pipelines are running in parallel, although they are started one minute apart from each other. When a testing pipeline is started, the test-operator-test-playbooks job adds a new check status to the pull request on GitHub indicating the name of the test pipeline and it sets the status to \u201cpending\u201d, so that end-users are informed that a test is in progress. When a testing pipeline completes, the check status is updated with either success or failure . Each pipeline\u2019s artifacts are uploaded to Amazon S3, the same artifacts as are uploaded in production, and can be viewed externally to determine which stages in the testing pipeline failed. The artifacts also contain a generalized link at the bottom of each test logs, so that the CVP team can access all the artifacts for the test pipeline that are not available externally.","title":"Usage"},{"location":"upstream/","text":"Instruction for operator test via ansible Standard test on clean machine ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua Standard test with operator prerequisites (-e run_prereqs=true) ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ --tags test Standard test without operator prerequisites (-e run_prereqs=false) ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ --tags pure_test or ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ --tags test \\ -e run_prereqs=false Super full test on clean machine ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ -e run_manifest_test=true \\ -e run_bundle_test=true Super full test quick (without installation) ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ -e run_manifest_test=true \\ -e run_bundle_test=true \\ --tags pure_test Install host only ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags install Reset host (eg. kind, registry) ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags reset Install dependency in playbook docker image when building ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags image_build Input source image (not supported now) ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_input_image=quay.io/cvpops/test-bundle:tigera-131 \\ --tags pure_test Deploy operators to index Config file: $ cat test/operators_config.yaml operator_base_dir: /tmp/community-operators-for-catalog/upstream-community-operators operators: - aqua - prometheus Deploy starting index image ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags deploy_bundles \\ -e operators_config=test/operators_config.yaml Deploy starting index image ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags deploy_bundles \\ -e operators_config=test/operators_config.yaml -e bundle_registry=quay.io \\ -e bundle_image_namespace=operator_testing \\ -e bundle_index_image_namespace=operator_testing \\ -e bundle_index_image_name=upstream-community-operators-index \\ -e quay_api_token=<quay-api-token> Deploy starting index image and mirror index ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags deploy_bundles \\ -e operators_config=test/operators_config.yaml -e bundle_registry=quay.io \\ -e bundle_image_namespace=operator_testing \\ -e bundle_index_image_namespace=operator_testing \\ -e bundle_index_image_name=upstream-community-operators-index \\ -e mirror_index_images=\"quay.io/operator_testing/upstream-community-operators-index-mirror|<user>|<password>\" \\ -e quay_api_token=<quay-api-token> Deploy index image and force channels to be autodetected by playbook ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags deploy_bundles \\ -e operators_config=test/operators_config.yaml -e operator_channel_force=\"\" Deploy index image and force channels to stable ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags deploy_bundles \\ -e operators_config=test/operators_config.yaml -e operator_channel_force=stable Remove operator from quay ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua -e operator_version=1.0.2 \\ --tags deploy_bundles \\ -e bundle_registry=quay.io -e bundle_image_namespace=operator_testing -e bundle_index_image_namespace=operator_testing \\ -e bundle_index_image_name=upstream-community-operators-index \\ -e quay_api_token=<token> Remove operator from quay (force to remove it from git just after git clone ) ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ --tags deploy_bundles -e remove_operators_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ -e bundle_registry=quay.io -e bundle_image_namespace=operator_testing -e bundle_index_image_namespace=operator_testing \\ -e bundle_index_image_name=upstream-community-operators-index \\ -e quay_api_token=<token> Remove operator from quay (force to remove it from git just after git clone ) ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ --tags deploy_bundles -e quay_api_token=<token> \\ -e bundle_registry=quay.io -e bundle_image_namespace=operator_testing \\ -e bundle_index_image_namespace=operator_testing -e bundle_index_image_name=upstream-community-operators-index \\ -e remove_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators -e remove_operator_dirs=\"aqua/1.0.2,aqua/1.0.1\" Recreate catalog (operatorhubio) TOKEN=\"<token>\" ansible-pull -U https://github.com/J0zi/operator-test-playbooks -C upstream-community -vv -i localhost, local.yml \\ -e run_upstream=true --tags deploy_bundles \\ -e regenerate_operators_path=/tmp/community-operators-for-catalog/upstream-community-operators \\ -e bundle_registry=quay.io \\ -e bundle_image_namespace=operatorhubio \\ -e bundle_index_image_namespace=operatorhubio \\ -e bundle_index_image_name=catalog \\ -e quay_api_token=$TOKEN \\ -e opm_index_add_mode=semver -e operator_channel_force=\"\" \\ | tee -a $HOME/recreate_operatorhubio-$(date +%F_%H%M).log 1>&2 Mirror exiting index image to different location ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags mirror_index \\ -e bundle_registry=quay.io \\ -e bundle_index_image_namespace=operator_testing \\ -e bundle_index_image_name=upstream-community-operators-index \\ -e mirror_index_images=\"quay.io/operator_testing/upstream-community-operators-index-mirror|<user>|<password>,quay.io/operator_testing/upstream-community-operators-index-mirror-second|<user2>|<password2>\" \\ -e quay_api_token=<quay-api-token> Mirror exiting index image to different location and converting to multi arch ansible-playbook -i localhost, -e ansible_connection=local local.yml \\ -e run_upstream=true -e run_prepare_catalog_repo_upstream=false \\ --tags mirror_index \\ -e mirror_index_images=\"quay.io/redhat/redhat----community-operator-index:latest|redhat+iib_community|<token>\" \\ -e mirror_multiarch_image=\"registry.redhat.io/openshift4/ose-operator-registry:v4.5\" \\ -e mirror_apply=true \\ -e bundle_index_image=\"quay.io/openshift-community-operators/catalog:latest\" -e container_tool=podman Test all operators export ANSIBLE_STDOUT_CALLBACK=yaml time ansible-pull -U https://github.com/J0zi/operator-test-playbooks -C upstream-community -vv -i localhost, local.yml \\ -e run_upstream=true --tags pure_test_all -e operator_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators \\ -e permisive=true -e pod_start_retries=30 -e pod_start_delay=5 \\ -e opm_index_add_mode=semver -e operator_channel_force=\"\" \\ -e all_operator_find_excludes=\"planetscale\"| tee -a $HOME/test_all_upstream-$(date +%F_%H%M).log 1>&2 Generate app registry (List of operators from index image) export ANSIBLE_STDOUT_CALLBACK=yaml time ansible-playbook -vv -i localhost, local.yml \\ -e run_upstream=true --tags app_registry \\ -e bundle_index_image=quay.io/operatorhubio/catalog:latest Generate app registry in parallel (List of operators from index image) and then push it export ANSIBLE_STDOUT_CALLBACK=yaml time ansible-playbook -vv -i localhost, local.yml \\ -e run_upstream=true --tags app_registry \\ -e bundle_index_image=quay.io/operatorhubio/catalog:latest \\ -e index_export_parallel=true \\ -e app_registry_image=\"kind-registry:5000/test-operator/app-registry\" Generate app registry (List of operators from git) export ANSIBLE_STDOUT_CALLBACK=yaml time ansible-playbook -vv -i localhost, local.yml \\ -e run_upstream=true --tags app_registry \\ -e operator_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators \\ -e bundle_index_image=quay.io/operatorhubio/catalog:latest Generate app registry in parallel (List of operators from git) export ANSIBLE_STDOUT_CALLBACK=yaml time ansible-playbook -vv -i localhost, local.yml \\ -e run_upstream=true --tags app_registry \\ -e operator_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators \\ -e bundle_index_image=quay.io/operatorhubio/catalog:latest \\ -e index_export_parallel=true Sync index and index sha ansible-playbook -i localhost, upstream/local.yml -e run_upstream=true \\ -e sis_index_image_input=quay.io/operatorhubio/catalog:latest \\ -e sis_index_image_output=quay.io/operatorhubio/catalog:latests \\ -e op_base_name=\"upstream-community-operators\" \\ --tags sync_index_sha \\ -e quay_api_token=xxx Misc options to use Usage: -e <option>=<value> Option Description Default value Prod default run_upstream Flag when running upstream part of playbooks. [bool] false true run_prepare_catalog_repo_upstream Prepare git repo for community-operators. [bool] true true run_remove_catalog_repo Removes existing git repo for community-operators. [bool] true true catalog_repo Community operators repo url. [string] https://github.com/operator-framework/community-operators.git as default catalog_repo_branch Community operators branch in repo. [string] master as default operators_config Path to operators config file using when deploying multiple operators. Examle in test/operators_config.yaml. [string] undefined operators_config.yaml quay_user Username in quay registry login. [string] undefined undefined quay_password Password in quay registry login. [string] undefined undefined quay_api_token Quay api token to create project, delete tag. If 'quay_user' or 'quay_password' is undefined. This token is used to push images to quay as '$oauthtoken' user. More info about creating token is here . [string] undefined hidden bundle_registry Quay bundle and index registry url. [string] kind-registry:5000 quay.io bundle_image_namespace Quay registry url. [string] test-operator operator_testing bundle_index_image_namespace Quay registry url. [string] test-operator operator_testing bundle_index_image_name Quay registry url. [string] index upstream-community-operators-index bundle_index_sha_posfix Index name postfix used for index build from bundle shas instead of tags. (example : \"s)[string] \"\" \"\" container_tool Container tool to use. [string] docker as default opm_container_tool Container tool to use when using opm tool. [string] docker as default opm_container_tool_index Container tool to use when using opm tool. [string] docker as default operator_channel_force Forcing to adde channel and default channed to current string value. When empty string it is autodetected by playbook. [string] undefined undefined index_force_update Force to rebuild currently running operators in index. [bool] false false fail_on_no_index_change Force to fail when no update in index is needed. [bool] undefined undefined bundle_force_rebuild Force to rebuild bundle of currently running operator and version. [bool] undefined undefined index_skip Skip building index (it will build bundle only). [bool] undefined undefined test_skip_deploy Skip deploy operator on kind cluster when testing. [bool] undefined undefined package_name_strict Test if package name is same as operator directory name. [bool] undefined undefined remove_replaces Remove replaces from csv. [bool] undefined undefined run_bundle_scorecard_test Runs bundle scorecard test. [bool] undefined undefined bundle_scorecard_test_config Config file where scorecard tests are defined. [string] generated n/a bundle_scorecard_test_select Runs specific scorecard tests. [string] basic-check-spec-test,olm-bundle-validation-test,olm-status-descriptors-test n/a recreate_skip_repo_clean Skip removing all repos in namespace from registry. (Applied only when is defined and value is true). [bool] undefined undefined remove_base_dir Specify base directory right after cloning community-operators project. Needs to specify remove_operator_dirs . See bellow. [string] undefined undefined remove_operator_dirs List directory right after cloning community-operators project relative to remove_base_dir . [string] undefined undefined all_operator_find_filter Filter pattern to find list of operators when running all tests (tags: test_all, pure_test_all). [string] undefined undefined all_operator_find_excludes Comma separated list of operators that should be excluded (tags: test_all, pure_test_all). [string] undefined undefined permisive Olm deploy will not fail when this flag is true. [bool] undefined undefined test_all_reset_kind Force to reset kind cluster before every test (undefined means true). [bool] undefined undefined production_registry_namespace Check if bundle exists in production registry. Used in local deploy_bundle test. (e.g. \"quay.io/operatorhubio\") [string] undefined undefined mirror_index_images List of mirror images for index. (e.g. \"kind-registry:5000/test-operator/catalog_mirror_auth ,kind-registry:5000/test-operator/catalog_mirror_no_auth\") [string] index_mode_from_ci Enable autodetect index add mode from /ci.yaml file [bool] undefined undefined openshift_robot_hash e.g. \"quay.io/operator_testing \" [string] bundles_namespace Quay namespace where to find list of packages and compare it with packages in index (eg. \"openshift-community-operators\" or \"operatorhubio\" )[string] undefined use_cluster_filter Enable multiple index images [bool] false true supported_cluster_versions Cluster (e.g. OCP) versions, indexes will be generated [string coma delimited] latest v4.6,v4.7 for Openshift; latest for kubernetes supported_cluster_version_latest Copy and tag specific index as latest v4.6 v4.6 for Openshift; not defined for kubernetes save_operator_tools_info Save operator tools info [bool] false false stream_kind Setup variables for specific stream kind (e.g. openshift_upstream) More info in local.yaml undefined undefined enable_production set safety limits for index push min_operators_in_index_allowed , max_missing_operators_allowed and other prod defaults [bool] N/A true min_operators_in_index_allowed minimal amount of operators in index before index push [int] N/A 30 max_missing_operators_allowed maximal amount of operators to be added to an index at once, safety index overwrite feature [int] N/A 20 delete_appreg Activate appregistry delete during release push to quay operation [bool] N/A true in case of operator delete allow_big_changes_to_existing Do not stop pipeline if change to a CSV is outside of dc_changes_allowed [bool] N/A N/A Tags to use Usage: --tags <tag1>,<tag2>...<tagN> Tag Description host_build Installs base packages needed to run on host (docker,kind,registry, ...) install Installs all packages incluing operator testing tools (--tags host_build + testing tools). uninstall Uninstall packages that were installed by install tag reset Resets kind cluster and recreate kind registry reset_tools Reinstall testing tools (operator-sdk,olm,opm,umoci,yq,jq). Used when updating versions of these tools. test Runs test including installing operator prerequisites pure_test Runs test excluding installing operator prerequisites (Faster then test once operator tools are installed. ) test_lite Runs test if operator bundle exists on production registry. The variable production_registry_namespace needs to be set. pure_test_lite Runs test if operator bundle exists on production registry. The variable production_registry_namespace needs to be set. (Installation of the operator prerequisites is excluded) deploy_bundles Deploy all bundles defined by operator_dir or operator_config remove_operator Removes operator from quay full bundle and index Scripts Recreate #!/bin/bash export ANSIBLE_STDOUT_CALLBACK=yaml export MY_OPT=\"\" #export MY_OPT=\"-e opm_index_add_mode=semver -e operator_channel_force=\\\"\\\" $*\" # operatorhubio TOKEN=\"<token>\" time ansible-pull -U https://github.com/J0zi/operator-test-playbooks -C sprint-8 -vv -i localhost, local.yml \\ -e run_upstream=true --tags deploy_bundles \\ -e regenerate_operators_path=/tmp/community-operators-for-catalog/upstream-community-operators \\ -e bundle_registry=quay.io \\ -e bundle_image_namespace=operatorhubio \\ -e bundle_index_image_namespace=operatorhubio \\ -e bundle_index_image_name=catalog \\ -e quay_api_token=$TOKEN \\ $MY_OPT \\ | tee -a $HOME/recreate_operatorhubio-$(date +%F_%H%M).log 1>&2 date +%F_%H%M Test all #!/bin/bash export MY_OPT=\"-e permisive=true\" #export MY_OPT=\"$MY_OPT -e pod_start_retries=30 -e pod_start_delay=5\" #export MY_OPT=\"$MY_OPT -e all_operator_find_excludes=\\\"planetscale\\\"\" export ANSIBLE_STDOUT_CALLBACK=yaml time ansible-pull -U https://github.com/J0zi/operator-test-playbooks -C sprint-8 -vv -i localhost, local.yml \\ -e run_upstream=true --tags pure_test_all -e operator_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators \\ -e opm_index_add_mode=semver -e operator_channel_force=\"\" \\ $MY_OPT | tee -a $HOME/test_all_upstream-$(date +%F_%H%M).log 1>&2 Check index ansible-pull -U https://github.com/J0zi/operator-test-playbooks -C upstream-community -vv -i localhost, local.yml \\ -e run_upstream=true --tags index_check \\ -e bundle_index_image=quay.io/operatorhubio/catalog \\ -e operator_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators Check index with addition of packages are in index but not in bundles_namespace (operatorhubio) in quay.io ansible-pull -U https://github.com/J0zi/operator-test-playbooks -C upstream-community -vv -i localhost, local.yml \\ -e run_upstream=true --tags index_check \\ -e bundle_index_image=quay.io/operatorhubio/catalog \\ -e operator_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators -e bundles_namespace=operatorhubio -e quay_api_token=<token> Prepare bundle and index for Openshift robot ansible-playbook -i host, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ -e operator_version=1.0.2 --tags deploy_bundles \\ -e remove_replaces=true \\ -e openshift_robot_hash=\"quay.io/operator_testing|<push-token>|1234\" Travis configuration operator-test-playbooks name value ANSIBLE_CONFIG \"$PWD/ansible.cfg\" ANSIBLE_BASE_ARGS \"-i localhost, local.yml -e ansible_connection=local -e run_upstream=true -e run_remove_catalog_repo=false\" community-operators name value ANSIBLE_CONFIG \"$PWD/ansible.cfg\" ANSIBLE_BASE_ARGS \"-i localhost, local.yml -e ansible_connection=local -e run_remove_catalog_repo=false\" ANSIBLE_EXTRA_ARGS \"\" ANSIBLE_PULL_REPO \"https://github.com/redhat-operator-ecosystem/operator-test-playbooks\" ANSIBLE_PULL_BRANCH \"upstream-community\" AUTOMATION_TOKEN_OPERATOR_TESTING on master AUTOMATION_TOKEN_RELEASE_COMMUNITY on release-pipeline-running AUTOMATION_TOKEN_RELEASE_UPSTREAM on release-pipeline-running CI_OHIO_TRIGGER_TOKEN on master FRAMEWORK_AUTOMATION_ON_TRAVIS on master QUAY_APPREG_TOKEN on master QUAY_COURIER_TOKEN on master community-operator-catalog name value ANSIBLE_CONFIG \"$PWD/ansible.cfg\" ANSIBLE_BASE_ARGS \"-i localhost, local.yml -e ansible_connection=local -e run_remove_catalog_repo=false\" ANSIBLE_EXTRA_ARGS \"\" ANSIBLE_PULL_REPO \"https://github.com/redhat-operator-ecosystem/operator-test-playbooks\" ANSIBLE_PULL_BRANCH \"upstream-community\" AUTOMATION_TOKEN_RELEASE_COMMUNITY all branches AUTOMATION_TOKEN_RELEASE_COMMUNITY_TEST all branches AUTOMATION_TOKEN_RELEASE_UPSTREAM all branches AUTOMATION_TOKEN_RELEASE_UPSTREAM_TEST all branches QUAY_RH_INDEX_PW on master QUAY_RH_INDEX_PW on job/update-community-index-manually INPUT_CATALOG_IMAGE \"quay.io/operatorhubio/catalog:latest\" (default, when nothing is set) APP_REGISTRY_IMAGE \"quay.io/operator-framework/upstream-community-operators:latest\" (default, when nothing is set) APP_REGISTRY_TOKEN on master CI_OHIO_BRANCH \"dev\" CI_OHIO_TRIGGER_TOKEN on master operatorhubio name value AKAMAI_APPCODES on master AKAMAI_SECRETS on master DOCKER_REGISTRY all branches DOCKER_IMAGE all branches DOCKER_USERNAME all branches DOCKER_PASSWORD all branches OPENSHIFT_SERVER all branches OPENSHIFT_TOKEN on dev OPENSHIFT_TOKEN on master OPENSHIFT_TOKEN on master2 OPENSHIFT_TOKEN_PREPROD on master APP_REGISTRY_IMAGE \"quay.io/operator-framework/upstream-community-operators:latest\"","title":"Instruction for operator test via ansible"},{"location":"upstream/#instruction-for-operator-test-via-ansible","text":"","title":"Instruction for operator test via ansible"},{"location":"upstream/#standard-test-on-clean-machine","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua","title":"Standard test on clean machine"},{"location":"upstream/#standard-test-with-operator-prerequisites-e-run_prereqstrue","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ --tags test","title":"Standard test with operator prerequisites (-e run_prereqs=true)"},{"location":"upstream/#standard-test-without-operator-prerequisites-e-run_prereqsfalse","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ --tags pure_test or ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ --tags test \\ -e run_prereqs=false","title":"Standard test without operator prerequisites (-e run_prereqs=false)"},{"location":"upstream/#super-full-test-on-clean-machine","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ -e run_manifest_test=true \\ -e run_bundle_test=true","title":"Super full test on clean machine"},{"location":"upstream/#super-full-test-quick-without-installation","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ -e run_manifest_test=true \\ -e run_bundle_test=true \\ --tags pure_test","title":"Super full test quick (without installation)"},{"location":"upstream/#install-host-only","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags install","title":"Install host only"},{"location":"upstream/#reset-host-eg-kind-registry","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags reset","title":"Reset host (eg. kind, registry)"},{"location":"upstream/#install-dependency-in-playbook-docker-image-when-building","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags image_build","title":"Install dependency in playbook docker image when building"},{"location":"upstream/#input-source-image-not-supported-now","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_input_image=quay.io/cvpops/test-bundle:tigera-131 \\ --tags pure_test","title":"Input source image (not supported now)"},{"location":"upstream/#deploy-operators-to-index","text":"Config file: $ cat test/operators_config.yaml operator_base_dir: /tmp/community-operators-for-catalog/upstream-community-operators operators: - aqua - prometheus","title":"Deploy operators to index"},{"location":"upstream/#deploy-starting-index-image","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags deploy_bundles \\ -e operators_config=test/operators_config.yaml","title":"Deploy starting index image"},{"location":"upstream/#deploy-starting-index-image_1","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags deploy_bundles \\ -e operators_config=test/operators_config.yaml -e bundle_registry=quay.io \\ -e bundle_image_namespace=operator_testing \\ -e bundle_index_image_namespace=operator_testing \\ -e bundle_index_image_name=upstream-community-operators-index \\ -e quay_api_token=<quay-api-token>","title":"Deploy starting index image"},{"location":"upstream/#deploy-starting-index-image-and-mirror-index","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags deploy_bundles \\ -e operators_config=test/operators_config.yaml -e bundle_registry=quay.io \\ -e bundle_image_namespace=operator_testing \\ -e bundle_index_image_namespace=operator_testing \\ -e bundle_index_image_name=upstream-community-operators-index \\ -e mirror_index_images=\"quay.io/operator_testing/upstream-community-operators-index-mirror|<user>|<password>\" \\ -e quay_api_token=<quay-api-token>","title":"Deploy starting index image and mirror index"},{"location":"upstream/#deploy-index-image-and-force-channels-to-be-autodetected-by-playbook","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags deploy_bundles \\ -e operators_config=test/operators_config.yaml -e operator_channel_force=\"\"","title":"Deploy index image and force channels to be autodetected by playbook"},{"location":"upstream/#deploy-index-image-and-force-channels-to-stable","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags deploy_bundles \\ -e operators_config=test/operators_config.yaml -e operator_channel_force=stable","title":"Deploy index image and force channels to stable"},{"location":"upstream/#remove-operator-from-quay","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua -e operator_version=1.0.2 \\ --tags deploy_bundles \\ -e bundle_registry=quay.io -e bundle_image_namespace=operator_testing -e bundle_index_image_namespace=operator_testing \\ -e bundle_index_image_name=upstream-community-operators-index \\ -e quay_api_token=<token>","title":"Remove operator from quay"},{"location":"upstream/#remove-operator-from-quay-force-to-remove-it-from-git-just-after-git-clone","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ --tags deploy_bundles -e remove_operators_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ -e bundle_registry=quay.io -e bundle_image_namespace=operator_testing -e bundle_index_image_namespace=operator_testing \\ -e bundle_index_image_name=upstream-community-operators-index \\ -e quay_api_token=<token>","title":"Remove operator from quay (force to remove it from git just after git clone )"},{"location":"upstream/#remove-operator-from-quay-force-to-remove-it-from-git-just-after-git-clone_1","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ --tags deploy_bundles -e quay_api_token=<token> \\ -e bundle_registry=quay.io -e bundle_image_namespace=operator_testing \\ -e bundle_index_image_namespace=operator_testing -e bundle_index_image_name=upstream-community-operators-index \\ -e remove_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators -e remove_operator_dirs=\"aqua/1.0.2,aqua/1.0.1\"","title":"Remove operator from quay (force to remove it from git just after git clone )"},{"location":"upstream/#recreate-catalog-operatorhubio","text":"TOKEN=\"<token>\" ansible-pull -U https://github.com/J0zi/operator-test-playbooks -C upstream-community -vv -i localhost, local.yml \\ -e run_upstream=true --tags deploy_bundles \\ -e regenerate_operators_path=/tmp/community-operators-for-catalog/upstream-community-operators \\ -e bundle_registry=quay.io \\ -e bundle_image_namespace=operatorhubio \\ -e bundle_index_image_namespace=operatorhubio \\ -e bundle_index_image_name=catalog \\ -e quay_api_token=$TOKEN \\ -e opm_index_add_mode=semver -e operator_channel_force=\"\" \\ | tee -a $HOME/recreate_operatorhubio-$(date +%F_%H%M).log 1>&2","title":"Recreate catalog (operatorhubio)"},{"location":"upstream/#mirror-exiting-index-image-to-different-location","text":"ansible-playbook -vv -i myhost, local.yml \\ -e run_upstream=true \\ --tags mirror_index \\ -e bundle_registry=quay.io \\ -e bundle_index_image_namespace=operator_testing \\ -e bundle_index_image_name=upstream-community-operators-index \\ -e mirror_index_images=\"quay.io/operator_testing/upstream-community-operators-index-mirror|<user>|<password>,quay.io/operator_testing/upstream-community-operators-index-mirror-second|<user2>|<password2>\" \\ -e quay_api_token=<quay-api-token>","title":"Mirror exiting index image to different location"},{"location":"upstream/#mirror-exiting-index-image-to-different-location-and-converting-to-multi-arch","text":"ansible-playbook -i localhost, -e ansible_connection=local local.yml \\ -e run_upstream=true -e run_prepare_catalog_repo_upstream=false \\ --tags mirror_index \\ -e mirror_index_images=\"quay.io/redhat/redhat----community-operator-index:latest|redhat+iib_community|<token>\" \\ -e mirror_multiarch_image=\"registry.redhat.io/openshift4/ose-operator-registry:v4.5\" \\ -e mirror_apply=true \\ -e bundle_index_image=\"quay.io/openshift-community-operators/catalog:latest\" -e container_tool=podman","title":"Mirror exiting index image to different location and converting to multi arch"},{"location":"upstream/#test-all-operators","text":"export ANSIBLE_STDOUT_CALLBACK=yaml time ansible-pull -U https://github.com/J0zi/operator-test-playbooks -C upstream-community -vv -i localhost, local.yml \\ -e run_upstream=true --tags pure_test_all -e operator_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators \\ -e permisive=true -e pod_start_retries=30 -e pod_start_delay=5 \\ -e opm_index_add_mode=semver -e operator_channel_force=\"\" \\ -e all_operator_find_excludes=\"planetscale\"| tee -a $HOME/test_all_upstream-$(date +%F_%H%M).log 1>&2","title":"Test all operators"},{"location":"upstream/#generate-app-registry-list-of-operators-from-index-image","text":"export ANSIBLE_STDOUT_CALLBACK=yaml time ansible-playbook -vv -i localhost, local.yml \\ -e run_upstream=true --tags app_registry \\ -e bundle_index_image=quay.io/operatorhubio/catalog:latest","title":"Generate app registry (List of operators from index image)"},{"location":"upstream/#generate-app-registry-in-parallel-list-of-operators-from-index-image-and-then-push-it","text":"export ANSIBLE_STDOUT_CALLBACK=yaml time ansible-playbook -vv -i localhost, local.yml \\ -e run_upstream=true --tags app_registry \\ -e bundle_index_image=quay.io/operatorhubio/catalog:latest \\ -e index_export_parallel=true \\ -e app_registry_image=\"kind-registry:5000/test-operator/app-registry\"","title":"Generate app registry in parallel (List of operators from index image) and then push it"},{"location":"upstream/#generate-app-registry-list-of-operators-from-git","text":"export ANSIBLE_STDOUT_CALLBACK=yaml time ansible-playbook -vv -i localhost, local.yml \\ -e run_upstream=true --tags app_registry \\ -e operator_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators \\ -e bundle_index_image=quay.io/operatorhubio/catalog:latest","title":"Generate app registry (List of operators from git)"},{"location":"upstream/#generate-app-registry-in-parallel-list-of-operators-from-git","text":"export ANSIBLE_STDOUT_CALLBACK=yaml time ansible-playbook -vv -i localhost, local.yml \\ -e run_upstream=true --tags app_registry \\ -e operator_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators \\ -e bundle_index_image=quay.io/operatorhubio/catalog:latest \\ -e index_export_parallel=true","title":"Generate app registry in parallel (List of operators from git)"},{"location":"upstream/#sync-index-and-index-sha","text":"ansible-playbook -i localhost, upstream/local.yml -e run_upstream=true \\ -e sis_index_image_input=quay.io/operatorhubio/catalog:latest \\ -e sis_index_image_output=quay.io/operatorhubio/catalog:latests \\ -e op_base_name=\"upstream-community-operators\" \\ --tags sync_index_sha \\ -e quay_api_token=xxx","title":"Sync index and index sha"},{"location":"upstream/#misc-options-to-use","text":"Usage: -e <option>=<value> Option Description Default value Prod default run_upstream Flag when running upstream part of playbooks. [bool] false true run_prepare_catalog_repo_upstream Prepare git repo for community-operators. [bool] true true run_remove_catalog_repo Removes existing git repo for community-operators. [bool] true true catalog_repo Community operators repo url. [string] https://github.com/operator-framework/community-operators.git as default catalog_repo_branch Community operators branch in repo. [string] master as default operators_config Path to operators config file using when deploying multiple operators. Examle in test/operators_config.yaml. [string] undefined operators_config.yaml quay_user Username in quay registry login. [string] undefined undefined quay_password Password in quay registry login. [string] undefined undefined quay_api_token Quay api token to create project, delete tag. If 'quay_user' or 'quay_password' is undefined. This token is used to push images to quay as '$oauthtoken' user. More info about creating token is here . [string] undefined hidden bundle_registry Quay bundle and index registry url. [string] kind-registry:5000 quay.io bundle_image_namespace Quay registry url. [string] test-operator operator_testing bundle_index_image_namespace Quay registry url. [string] test-operator operator_testing bundle_index_image_name Quay registry url. [string] index upstream-community-operators-index bundle_index_sha_posfix Index name postfix used for index build from bundle shas instead of tags. (example : \"s)[string] \"\" \"\" container_tool Container tool to use. [string] docker as default opm_container_tool Container tool to use when using opm tool. [string] docker as default opm_container_tool_index Container tool to use when using opm tool. [string] docker as default operator_channel_force Forcing to adde channel and default channed to current string value. When empty string it is autodetected by playbook. [string] undefined undefined index_force_update Force to rebuild currently running operators in index. [bool] false false fail_on_no_index_change Force to fail when no update in index is needed. [bool] undefined undefined bundle_force_rebuild Force to rebuild bundle of currently running operator and version. [bool] undefined undefined index_skip Skip building index (it will build bundle only). [bool] undefined undefined test_skip_deploy Skip deploy operator on kind cluster when testing. [bool] undefined undefined package_name_strict Test if package name is same as operator directory name. [bool] undefined undefined remove_replaces Remove replaces from csv. [bool] undefined undefined run_bundle_scorecard_test Runs bundle scorecard test. [bool] undefined undefined bundle_scorecard_test_config Config file where scorecard tests are defined. [string] generated n/a bundle_scorecard_test_select Runs specific scorecard tests. [string] basic-check-spec-test,olm-bundle-validation-test,olm-status-descriptors-test n/a recreate_skip_repo_clean Skip removing all repos in namespace from registry. (Applied only when is defined and value is true). [bool] undefined undefined remove_base_dir Specify base directory right after cloning community-operators project. Needs to specify remove_operator_dirs . See bellow. [string] undefined undefined remove_operator_dirs List directory right after cloning community-operators project relative to remove_base_dir . [string] undefined undefined all_operator_find_filter Filter pattern to find list of operators when running all tests (tags: test_all, pure_test_all). [string] undefined undefined all_operator_find_excludes Comma separated list of operators that should be excluded (tags: test_all, pure_test_all). [string] undefined undefined permisive Olm deploy will not fail when this flag is true. [bool] undefined undefined test_all_reset_kind Force to reset kind cluster before every test (undefined means true). [bool] undefined undefined production_registry_namespace Check if bundle exists in production registry. Used in local deploy_bundle test. (e.g. \"quay.io/operatorhubio\") [string] undefined undefined mirror_index_images List of mirror images for index. (e.g. \"kind-registry:5000/test-operator/catalog_mirror_auth ,kind-registry:5000/test-operator/catalog_mirror_no_auth\") [string] index_mode_from_ci Enable autodetect index add mode from /ci.yaml file [bool] undefined undefined openshift_robot_hash e.g. \"quay.io/operator_testing \" [string] bundles_namespace Quay namespace where to find list of packages and compare it with packages in index (eg. \"openshift-community-operators\" or \"operatorhubio\" )[string] undefined use_cluster_filter Enable multiple index images [bool] false true supported_cluster_versions Cluster (e.g. OCP) versions, indexes will be generated [string coma delimited] latest v4.6,v4.7 for Openshift; latest for kubernetes supported_cluster_version_latest Copy and tag specific index as latest v4.6 v4.6 for Openshift; not defined for kubernetes save_operator_tools_info Save operator tools info [bool] false false stream_kind Setup variables for specific stream kind (e.g. openshift_upstream) More info in local.yaml undefined undefined enable_production set safety limits for index push min_operators_in_index_allowed , max_missing_operators_allowed and other prod defaults [bool] N/A true min_operators_in_index_allowed minimal amount of operators in index before index push [int] N/A 30 max_missing_operators_allowed maximal amount of operators to be added to an index at once, safety index overwrite feature [int] N/A 20 delete_appreg Activate appregistry delete during release push to quay operation [bool] N/A true in case of operator delete allow_big_changes_to_existing Do not stop pipeline if change to a CSV is outside of dc_changes_allowed [bool] N/A N/A","title":"Misc options to use"},{"location":"upstream/#tags-to-use","text":"Usage: --tags <tag1>,<tag2>...<tagN> Tag Description host_build Installs base packages needed to run on host (docker,kind,registry, ...) install Installs all packages incluing operator testing tools (--tags host_build + testing tools). uninstall Uninstall packages that were installed by install tag reset Resets kind cluster and recreate kind registry reset_tools Reinstall testing tools (operator-sdk,olm,opm,umoci,yq,jq). Used when updating versions of these tools. test Runs test including installing operator prerequisites pure_test Runs test excluding installing operator prerequisites (Faster then test once operator tools are installed. ) test_lite Runs test if operator bundle exists on production registry. The variable production_registry_namespace needs to be set. pure_test_lite Runs test if operator bundle exists on production registry. The variable production_registry_namespace needs to be set. (Installation of the operator prerequisites is excluded) deploy_bundles Deploy all bundles defined by operator_dir or operator_config remove_operator Removes operator from quay full bundle and index","title":"Tags to use"},{"location":"upstream/#scripts","text":"","title":"Scripts"},{"location":"upstream/#recreate","text":"#!/bin/bash export ANSIBLE_STDOUT_CALLBACK=yaml export MY_OPT=\"\" #export MY_OPT=\"-e opm_index_add_mode=semver -e operator_channel_force=\\\"\\\" $*\" # operatorhubio TOKEN=\"<token>\" time ansible-pull -U https://github.com/J0zi/operator-test-playbooks -C sprint-8 -vv -i localhost, local.yml \\ -e run_upstream=true --tags deploy_bundles \\ -e regenerate_operators_path=/tmp/community-operators-for-catalog/upstream-community-operators \\ -e bundle_registry=quay.io \\ -e bundle_image_namespace=operatorhubio \\ -e bundle_index_image_namespace=operatorhubio \\ -e bundle_index_image_name=catalog \\ -e quay_api_token=$TOKEN \\ $MY_OPT \\ | tee -a $HOME/recreate_operatorhubio-$(date +%F_%H%M).log 1>&2 date +%F_%H%M","title":"Recreate"},{"location":"upstream/#test-all","text":"#!/bin/bash export MY_OPT=\"-e permisive=true\" #export MY_OPT=\"$MY_OPT -e pod_start_retries=30 -e pod_start_delay=5\" #export MY_OPT=\"$MY_OPT -e all_operator_find_excludes=\\\"planetscale\\\"\" export ANSIBLE_STDOUT_CALLBACK=yaml time ansible-pull -U https://github.com/J0zi/operator-test-playbooks -C sprint-8 -vv -i localhost, local.yml \\ -e run_upstream=true --tags pure_test_all -e operator_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators \\ -e opm_index_add_mode=semver -e operator_channel_force=\"\" \\ $MY_OPT | tee -a $HOME/test_all_upstream-$(date +%F_%H%M).log 1>&2","title":"Test all"},{"location":"upstream/#check-index","text":"ansible-pull -U https://github.com/J0zi/operator-test-playbooks -C upstream-community -vv -i localhost, local.yml \\ -e run_upstream=true --tags index_check \\ -e bundle_index_image=quay.io/operatorhubio/catalog \\ -e operator_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators","title":"Check index"},{"location":"upstream/#check-index-with-addition-of-packages-are-in-index-but-not-in-bundles_namespace-operatorhubio-in-quayio","text":"ansible-pull -U https://github.com/J0zi/operator-test-playbooks -C upstream-community -vv -i localhost, local.yml \\ -e run_upstream=true --tags index_check \\ -e bundle_index_image=quay.io/operatorhubio/catalog \\ -e operator_base_dir=/tmp/community-operators-for-catalog/upstream-community-operators -e bundles_namespace=operatorhubio -e quay_api_token=<token>","title":"Check index with addition of packages are in index but not in bundles_namespace (operatorhubio) in quay.io"},{"location":"upstream/#prepare-bundle-and-index-for-openshift-robot","text":"ansible-playbook -i host, local.yml \\ -e run_upstream=true \\ -e operator_dir=/tmp/community-operators-for-catalog/upstream-community-operators/aqua \\ -e operator_version=1.0.2 --tags deploy_bundles \\ -e remove_replaces=true \\ -e openshift_robot_hash=\"quay.io/operator_testing|<push-token>|1234\"","title":"Prepare bundle and index for Openshift robot"},{"location":"upstream/#travis-configuration","text":"","title":"Travis configuration"},{"location":"upstream/#operator-test-playbooks","text":"name value ANSIBLE_CONFIG \"$PWD/ansible.cfg\" ANSIBLE_BASE_ARGS \"-i localhost, local.yml -e ansible_connection=local -e run_upstream=true -e run_remove_catalog_repo=false\"","title":"operator-test-playbooks"},{"location":"upstream/#community-operators","text":"name value ANSIBLE_CONFIG \"$PWD/ansible.cfg\" ANSIBLE_BASE_ARGS \"-i localhost, local.yml -e ansible_connection=local -e run_remove_catalog_repo=false\" ANSIBLE_EXTRA_ARGS \"\" ANSIBLE_PULL_REPO \"https://github.com/redhat-operator-ecosystem/operator-test-playbooks\" ANSIBLE_PULL_BRANCH \"upstream-community\" AUTOMATION_TOKEN_OPERATOR_TESTING on master AUTOMATION_TOKEN_RELEASE_COMMUNITY on release-pipeline-running AUTOMATION_TOKEN_RELEASE_UPSTREAM on release-pipeline-running CI_OHIO_TRIGGER_TOKEN on master FRAMEWORK_AUTOMATION_ON_TRAVIS on master QUAY_APPREG_TOKEN on master QUAY_COURIER_TOKEN on master","title":"community-operators"},{"location":"upstream/#community-operator-catalog","text":"name value ANSIBLE_CONFIG \"$PWD/ansible.cfg\" ANSIBLE_BASE_ARGS \"-i localhost, local.yml -e ansible_connection=local -e run_remove_catalog_repo=false\" ANSIBLE_EXTRA_ARGS \"\" ANSIBLE_PULL_REPO \"https://github.com/redhat-operator-ecosystem/operator-test-playbooks\" ANSIBLE_PULL_BRANCH \"upstream-community\" AUTOMATION_TOKEN_RELEASE_COMMUNITY all branches AUTOMATION_TOKEN_RELEASE_COMMUNITY_TEST all branches AUTOMATION_TOKEN_RELEASE_UPSTREAM all branches AUTOMATION_TOKEN_RELEASE_UPSTREAM_TEST all branches QUAY_RH_INDEX_PW on master QUAY_RH_INDEX_PW on job/update-community-index-manually INPUT_CATALOG_IMAGE \"quay.io/operatorhubio/catalog:latest\" (default, when nothing is set) APP_REGISTRY_IMAGE \"quay.io/operator-framework/upstream-community-operators:latest\" (default, when nothing is set) APP_REGISTRY_TOKEN on master CI_OHIO_BRANCH \"dev\" CI_OHIO_TRIGGER_TOKEN on master","title":"community-operator-catalog"},{"location":"upstream/#operatorhubio","text":"name value AKAMAI_APPCODES on master AKAMAI_SECRETS on master DOCKER_REGISTRY all branches DOCKER_IMAGE all branches DOCKER_USERNAME all branches DOCKER_PASSWORD all branches OPENSHIFT_SERVER all branches OPENSHIFT_TOKEN on dev OPENSHIFT_TOKEN on master OPENSHIFT_TOKEN on master2 OPENSHIFT_TOKEN_PREPROD on master APP_REGISTRY_IMAGE \"quay.io/operator-framework/upstream-community-operators:latest\"","title":"operatorhubio"},{"location":"upstream/bundle/","text":"Bundle deploy and testing Bundle format Bundle directory structure Bundle format consists 2 direcotries ( manifests and metadata ). It might contain the optional Dockerfile to build custom bundles (99% it is not needed). prometheus \u2514\u2500\u2500 0.40.0 \u251c\u2500\u2500 Dockerfile (optional) \u251c\u2500\u2500 manifests \u2502 \u251c\u2500\u2500 alertmanagers.monitoring.coreos.com.crd.yaml \u2502 \u251c\u2500\u2500 podmonitors.monitoring.coreos.com.crd.yaml \u2502 \u251c\u2500\u2500 prometheuses.monitoring.coreos.com.crd.yaml \u2502 \u251c\u2500\u2500 prometheusoperator.v0.40.0.clusterserviceversion.yaml \u2502 \u251c\u2500\u2500 prometheusrules.monitoring.coreos.com.crd.yaml \u2502 \u2514\u2500\u2500 servicemonitors.monitoring.coreos.com.crd.yaml \u2514\u2500\u2500 metadata \u2514\u2500\u2500 annotations.yaml Manifests directory This directory contains one CSV file ( <name>.<version>-clusterserviceversion.yaml ) and multiple CRDs needed for operartor to run correctly. Metadata directory Metadata directory contains annotations.yaml file with information about operator packaging in yaml format. E.g. [localhost community-operators]$ cat prometheus/0.40.0/metadata/annotations.yaml annotations: operators.operatorframework.io.bundle.package.v1: \"prometheus\" operators.operatorframework.io.bundle.channels.v1: \"preview\" operators.operatorframework.io.bundle.channel.default.v1: \"preview\" operators.operatorframework.io.bundle.mediatype.v1: \"registry+v1\" operators.operatorframework.io.bundle.manifests.v1: \"manifests/\" operators.operatorframework.io.bundle.metadata.v1: \"metadata/\" It decribes following values | Name | Description | | :---- | :------ | |operators.operatorframework.io.bundle.package.v1| Package name | |operators.operatorframework.io.bundle.channels.v1| List of channels (comma separated)| |operators.operatorframework.io.bundle.channel.default.v1| Default channel| |operators.operatorframework.io.bundle.mediatype.v1| Operator media type| |operators.operatorframework.io.bundle.manifests.v1| Location of manifests files| |operators.operatorframework.io.bundle.metadata.v1| Location of metadata| Porting from old manifest format Copy all files to manifests directory Create metadata/annotations.yaml file Port package information to metadata/annotations.yaml and delete *package.yaml file Testing of bundle format Testing documentation is located here . One can use kiwi Test to test the operator KIWI test We call full operator test with name kiwi . It is easy to remember and user can run same test (Since in CI same name is used), as it is done when doing PR. It consists of following steps Verify integrity of operator Deploys operator on kind cluster Test operator if it can be started and healhy for some period of time In this example, one can see kiwi test Using ansible 2.9.13 ... One can do 'tail -f /tmp/op-test/log.out' from second console to see full logs Checking for kind binary ... Test 'kiwi' ... [kiwi] Reseting kind cluster ... [kiwi] Running test (upstream-community-operators aqua 1.0.2) ... Test 'kiwi' : [ OK ] Done Temporary artifact storage are located in op-test container in /tmp/operator-test directory. One can enter container via $ podman exec -it op-test /bin/bash [in container] $ ls -al /tmp/operator-test/ total 156 drwxr-xr-x 1 root root 4096 Oct 26 13:15 . drwxrwxrwt 1 root root 4096 Oct 26 13:17 .. drwxr-xr-x 3 root root 4096 Oct 22 08:16 bin -rw-r--r-- 1 root root 910 Oct 26 13:12 bundle-skopeo-inspect.json -rw-r--r-- 1 root root 0 Oct 26 13:13 linting-errors.txt -rw-r--r-- 1 root root 0 Oct 26 13:13 linting-output.txt -rw-r--r-- 1 root root 1 Oct 26 13:13 linting-rc.txt -rw-r--r-- 1 root root 31 Oct 26 13:13 linting-results.json -rw-r--r-- 1 root root 5 Oct 26 13:13 linting-version.txt -rw-r--r-- 1 root root 17234 Oct 26 13:15 olm-catalog-operator-debug.txt -rw-r--r-- 1 root root 225 Oct 26 13:15 olm-catalog-source-debug.txt -rw-r--r-- 1 root root 28462 Oct 26 13:15 olm-installplan-debug.txt -rw-r--r-- 1 root root 9966 Oct 26 13:15 olm-operator-container-debug.txt -rw-r--r-- 1 root root 23299 Oct 26 13:15 olm-operator-csv-debug.txt drwxr-xr-x 2 root root 4096 Oct 26 13:13 olm-operator-files -rw-r--r-- 1 root root 982 Oct 26 13:15 olm-operator-pod-debug.txt drwxr-xr-x 4 root root 4096 Oct 26 13:12 operator-bundle drwxr-xr-x 3 root root 4096 Oct 26 13:13 operator-bundle-for-courier drwxr-xr-x 4 root root 4096 Oct 26 13:12 operator-files -rw-r--r-- 1 root root 1130 Oct 26 13:12 parsed_operator_data.yml -rw-r--r-- 1 root root 475 Oct 26 13:12 validation-output.txt -rw-r--r-- 1 root root 1 Oct 26 13:12 validation-rc.txt -rw-r--r-- 1 root root 151 Oct 26 13:12 validation-version.txt LEMON and ORANGE tests When operator is well tested one can test if operator can be added to the index catalog. There are 2 test cases: lemon : Operator is added to index from scratch (all previous versions are rebuilt) orange : Operator is added to index and all previous bundle versions are added from production registry for community-operators and upstream-community-operators Index image Operator can be subscribed to an index image . There are 3 location for index images on Quay.io. * Openshift index https://quay.io/repository/redhat/redhat----community-operator-index?tag=latest&tab=tags * Openshift public index https://quay.io/repository/openshift-community-operators/catalog?tab=tags. All Openshift operators in bundle image format are a directory above. * Kubernetes index image https://quay.io/repository/operatorhubio/catalog?tab=tags. Same applies here. All Openshift operators in bundle image format are a directory above. Index build process Index image is build by Travis during community-operator-catalog build . There are 2 branches important, community-operators and upstream-community-operators which are supposed to build index for the specific stream - Openshift and Kubernetes. Bundle build After a merge of specific operator, bundle for specific version is built and pushed to specific quay. It is either openshift-community-operators or operatorhubio . Add operator to index After actual bundle image is ready, whole package is removed from the index. Then bundle images are added, existing images from quay plus newly created one. It allows to change update graph after a merge also. Corner case - just ci.yaml has changed In case no operator was modified, just update graph , package is removed and added to index with actual flag setting update graph.","title":"Bundle deploy and testing"},{"location":"upstream/bundle/#bundle-deploy-and-testing","text":"","title":"Bundle deploy and testing"},{"location":"upstream/bundle/#bundle-format","text":"","title":"Bundle format"},{"location":"upstream/bundle/#bundle-directory-structure","text":"Bundle format consists 2 direcotries ( manifests and metadata ). It might contain the optional Dockerfile to build custom bundles (99% it is not needed). prometheus \u2514\u2500\u2500 0.40.0 \u251c\u2500\u2500 Dockerfile (optional) \u251c\u2500\u2500 manifests \u2502 \u251c\u2500\u2500 alertmanagers.monitoring.coreos.com.crd.yaml \u2502 \u251c\u2500\u2500 podmonitors.monitoring.coreos.com.crd.yaml \u2502 \u251c\u2500\u2500 prometheuses.monitoring.coreos.com.crd.yaml \u2502 \u251c\u2500\u2500 prometheusoperator.v0.40.0.clusterserviceversion.yaml \u2502 \u251c\u2500\u2500 prometheusrules.monitoring.coreos.com.crd.yaml \u2502 \u2514\u2500\u2500 servicemonitors.monitoring.coreos.com.crd.yaml \u2514\u2500\u2500 metadata \u2514\u2500\u2500 annotations.yaml","title":"Bundle directory structure"},{"location":"upstream/bundle/#manifests-directory","text":"This directory contains one CSV file ( <name>.<version>-clusterserviceversion.yaml ) and multiple CRDs needed for operartor to run correctly.","title":"Manifests directory"},{"location":"upstream/bundle/#metadata-directory","text":"Metadata directory contains annotations.yaml file with information about operator packaging in yaml format. E.g. [localhost community-operators]$ cat prometheus/0.40.0/metadata/annotations.yaml annotations: operators.operatorframework.io.bundle.package.v1: \"prometheus\" operators.operatorframework.io.bundle.channels.v1: \"preview\" operators.operatorframework.io.bundle.channel.default.v1: \"preview\" operators.operatorframework.io.bundle.mediatype.v1: \"registry+v1\" operators.operatorframework.io.bundle.manifests.v1: \"manifests/\" operators.operatorframework.io.bundle.metadata.v1: \"metadata/\" It decribes following values | Name | Description | | :---- | :------ | |operators.operatorframework.io.bundle.package.v1| Package name | |operators.operatorframework.io.bundle.channels.v1| List of channels (comma separated)| |operators.operatorframework.io.bundle.channel.default.v1| Default channel| |operators.operatorframework.io.bundle.mediatype.v1| Operator media type| |operators.operatorframework.io.bundle.manifests.v1| Location of manifests files| |operators.operatorframework.io.bundle.metadata.v1| Location of metadata|","title":"Metadata directory"},{"location":"upstream/bundle/#porting-from-old-manifest-format","text":"Copy all files to manifests directory Create metadata/annotations.yaml file Port package information to metadata/annotations.yaml and delete *package.yaml file","title":"Porting from old manifest format"},{"location":"upstream/bundle/#testing-of-bundle-format","text":"Testing documentation is located here . One can use kiwi Test to test the operator","title":"Testing of bundle format"},{"location":"upstream/bundle/#kiwi-test","text":"We call full operator test with name kiwi . It is easy to remember and user can run same test (Since in CI same name is used), as it is done when doing PR. It consists of following steps Verify integrity of operator Deploys operator on kind cluster Test operator if it can be started and healhy for some period of time In this example, one can see kiwi test Using ansible 2.9.13 ... One can do 'tail -f /tmp/op-test/log.out' from second console to see full logs Checking for kind binary ... Test 'kiwi' ... [kiwi] Reseting kind cluster ... [kiwi] Running test (upstream-community-operators aqua 1.0.2) ... Test 'kiwi' : [ OK ] Done Temporary artifact storage are located in op-test container in /tmp/operator-test directory. One can enter container via $ podman exec -it op-test /bin/bash [in container] $ ls -al /tmp/operator-test/ total 156 drwxr-xr-x 1 root root 4096 Oct 26 13:15 . drwxrwxrwt 1 root root 4096 Oct 26 13:17 .. drwxr-xr-x 3 root root 4096 Oct 22 08:16 bin -rw-r--r-- 1 root root 910 Oct 26 13:12 bundle-skopeo-inspect.json -rw-r--r-- 1 root root 0 Oct 26 13:13 linting-errors.txt -rw-r--r-- 1 root root 0 Oct 26 13:13 linting-output.txt -rw-r--r-- 1 root root 1 Oct 26 13:13 linting-rc.txt -rw-r--r-- 1 root root 31 Oct 26 13:13 linting-results.json -rw-r--r-- 1 root root 5 Oct 26 13:13 linting-version.txt -rw-r--r-- 1 root root 17234 Oct 26 13:15 olm-catalog-operator-debug.txt -rw-r--r-- 1 root root 225 Oct 26 13:15 olm-catalog-source-debug.txt -rw-r--r-- 1 root root 28462 Oct 26 13:15 olm-installplan-debug.txt -rw-r--r-- 1 root root 9966 Oct 26 13:15 olm-operator-container-debug.txt -rw-r--r-- 1 root root 23299 Oct 26 13:15 olm-operator-csv-debug.txt drwxr-xr-x 2 root root 4096 Oct 26 13:13 olm-operator-files -rw-r--r-- 1 root root 982 Oct 26 13:15 olm-operator-pod-debug.txt drwxr-xr-x 4 root root 4096 Oct 26 13:12 operator-bundle drwxr-xr-x 3 root root 4096 Oct 26 13:13 operator-bundle-for-courier drwxr-xr-x 4 root root 4096 Oct 26 13:12 operator-files -rw-r--r-- 1 root root 1130 Oct 26 13:12 parsed_operator_data.yml -rw-r--r-- 1 root root 475 Oct 26 13:12 validation-output.txt -rw-r--r-- 1 root root 1 Oct 26 13:12 validation-rc.txt -rw-r--r-- 1 root root 151 Oct 26 13:12 validation-version.txt","title":"KIWI test"},{"location":"upstream/bundle/#lemon-and-orange-tests","text":"When operator is well tested one can test if operator can be added to the index catalog. There are 2 test cases: lemon : Operator is added to index from scratch (all previous versions are rebuilt) orange : Operator is added to index and all previous bundle versions are added from production registry for community-operators and upstream-community-operators","title":"LEMON and ORANGE tests"},{"location":"upstream/bundle/#index-image","text":"Operator can be subscribed to an index image . There are 3 location for index images on Quay.io. * Openshift index https://quay.io/repository/redhat/redhat----community-operator-index?tag=latest&tab=tags * Openshift public index https://quay.io/repository/openshift-community-operators/catalog?tab=tags. All Openshift operators in bundle image format are a directory above. * Kubernetes index image https://quay.io/repository/operatorhubio/catalog?tab=tags. Same applies here. All Openshift operators in bundle image format are a directory above.","title":"Index image"},{"location":"upstream/bundle/#index-build-process","text":"Index image is build by Travis during community-operator-catalog build . There are 2 branches important, community-operators and upstream-community-operators which are supposed to build index for the specific stream - Openshift and Kubernetes.","title":"Index build process"},{"location":"upstream/bundle/#bundle-build","text":"After a merge of specific operator, bundle for specific version is built and pushed to specific quay. It is either openshift-community-operators or operatorhubio .","title":"Bundle build"},{"location":"upstream/bundle/#add-operator-to-index","text":"After actual bundle image is ready, whole package is removed from the index. Then bundle images are added, existing images from quay plus newly created one. It allows to change update graph after a merge also.","title":"Add operator to index"},{"location":"upstream/bundle/#corner-case-just-ciyaml-has-changed","text":"In case no operator was modified, just update graph , package is removed and added to index with actual flag setting update graph.","title":"Corner case - just ci.yaml has changed"},{"location":"upstream/manifest/","text":"Manifest deploy and testing [ ] Manifest directory [ ] Metadata directory [ ] Converting to bundle format [ ] Package name has to be same as directory [ ] Point to bundle doc","title":"Manifest deploy and testing"},{"location":"upstream/manifest/#manifest-deploy-and-testing","text":"[ ] Manifest directory [ ] Metadata directory [ ] Converting to bundle format [ ] Package name has to be same as directory [ ] Point to bundle doc","title":"Manifest deploy and testing"},{"location":"upstream/users/","text":"Operator tests Running tests One can run test by entering to 'community-operators' project directory and run with following command with these options. ' ' and ' ' options are optional cd <community-operators> bash <(curl -sL https://cutt.ly/WhkV76k) \\ <test-type1,test-type2,...,test-typeN> \\ <operator-version-dir-relative-to-community-operators-project> \\ [<git repo>] [<git branch>] Test type List of tests are shown in following table |Test type|Description| |:--------|:----------| |kiwi|Full operator test| |lemon|Full test of operator to be deployed from scratch| |orange|Full test of operator to be deployed with existing bundles in quay registry| |all|kiwi,lemon,orange| Logs Logs can be found in /tmp/op-test/log.out Testing log files If operator test fails, one can enter to testing container via follwing command. One can substitue 'docker' with 'podman' when supported docker exec -it op-test /bin/bash Examples Running tests from local direcotry Following example will run 'all' tests on 'aqua' operator with version '1.0.2' from 'upstream-community-operators (k8s)' directory. 'community-operators' project will be taken from local directory one is running command from ($PWD). cd <community-operators> bash <(curl -sL https://cutt.ly/WhkV76k) \\ all \\ upstream-community-operators/aqua/1.0.2 Running tests from official 'community-operators' repo Following example will run 'kiwi' and 'lemon' tests on 'aqua' operator with version '1.0.2' from 'community-operators (openshift)' directory. 'community-operators' project will be taken from git repo 'https://github.com/operator-framework/community-operators' and 'master' branch cd <community-operators> bash <(curl -sL https://cutt.ly/WhkV76k) \\ kiwi,lemon \\ community-operators/aqua/1.0.2 \\ https://github.com/operator-framework/community-operators \\ master Running tests from forked 'community-operators' repo ans specific branch Following example will run 'kiwi' and 'lemon' tests on 'kong' operator with version '0.5.0' from 'upstream-community-operators (k8s)' directory.'community-operators' project will be taken from git repo 'https://github.com/Kong/community-operators' and 'release/v0.5.0' branch ('https://github.com/Kong/community-operators/tree/release/v0.5.0') cd <community-operators> bash <(curl -sL https://cutt.ly/WhkV76k) \\ kiwi,lemon \\ upstream-community-operators/kong/0.5.0 \\ https://github.com/Kong/community-operators \\ release/v0.5.0 Misc Name Description Default OP_TEST_DEBUG Debug level (0-3) 0 OP_TEST_CONTAINER_TOOL Container tool used on host docker OP_TEST_DRY_RUN Will print commands to be executed 0","title":"Operator tests"},{"location":"upstream/users/#operator-tests","text":"","title":"Operator tests"},{"location":"upstream/users/#running-tests","text":"One can run test by entering to 'community-operators' project directory and run with following command with these options. ' ' and ' ' options are optional cd <community-operators> bash <(curl -sL https://cutt.ly/WhkV76k) \\ <test-type1,test-type2,...,test-typeN> \\ <operator-version-dir-relative-to-community-operators-project> \\ [<git repo>] [<git branch>]","title":"Running tests"},{"location":"upstream/users/#test-type","text":"List of tests are shown in following table |Test type|Description| |:--------|:----------| |kiwi|Full operator test| |lemon|Full test of operator to be deployed from scratch| |orange|Full test of operator to be deployed with existing bundles in quay registry| |all|kiwi,lemon,orange|","title":"Test type"},{"location":"upstream/users/#logs","text":"Logs can be found in /tmp/op-test/log.out","title":"Logs"},{"location":"upstream/users/#testing-log-files","text":"If operator test fails, one can enter to testing container via follwing command. One can substitue 'docker' with 'podman' when supported docker exec -it op-test /bin/bash","title":"Testing log files"},{"location":"upstream/users/#examples","text":"","title":"Examples"},{"location":"upstream/users/#running-tests-from-local-direcotry","text":"Following example will run 'all' tests on 'aqua' operator with version '1.0.2' from 'upstream-community-operators (k8s)' directory. 'community-operators' project will be taken from local directory one is running command from ($PWD). cd <community-operators> bash <(curl -sL https://cutt.ly/WhkV76k) \\ all \\ upstream-community-operators/aqua/1.0.2","title":"Running tests from local direcotry"},{"location":"upstream/users/#running-tests-from-official-community-operators-repo","text":"Following example will run 'kiwi' and 'lemon' tests on 'aqua' operator with version '1.0.2' from 'community-operators (openshift)' directory. 'community-operators' project will be taken from git repo 'https://github.com/operator-framework/community-operators' and 'master' branch cd <community-operators> bash <(curl -sL https://cutt.ly/WhkV76k) \\ kiwi,lemon \\ community-operators/aqua/1.0.2 \\ https://github.com/operator-framework/community-operators \\ master","title":"Running tests from official 'community-operators' repo"},{"location":"upstream/users/#running-tests-from-forked-community-operators-repo-ans-specific-branch","text":"Following example will run 'kiwi' and 'lemon' tests on 'kong' operator with version '0.5.0' from 'upstream-community-operators (k8s)' directory.'community-operators' project will be taken from git repo 'https://github.com/Kong/community-operators' and 'release/v0.5.0' branch ('https://github.com/Kong/community-operators/tree/release/v0.5.0') cd <community-operators> bash <(curl -sL https://cutt.ly/WhkV76k) \\ kiwi,lemon \\ upstream-community-operators/kong/0.5.0 \\ https://github.com/Kong/community-operators \\ release/v0.5.0","title":"Running tests from forked 'community-operators' repo ans specific branch"},{"location":"upstream/users/#misc","text":"Name Description Default OP_TEST_DEBUG Debug level (0-3) 0 OP_TEST_CONTAINER_TOOL Container tool used on host docker OP_TEST_DRY_RUN Will print commands to be executed 0","title":"Misc"}]}